from __future__ import print_function 
import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial.distance import cdist
np.random.seed(11)                              # seed ngẫu nhiên



means = [[2, 2], [8, 3], [3, 6]]
cov = [[1, 0], [0, 1]]
N = 500
X0 = np.random.multivariate_normal(means[0], cov, N)
X1 = np.random.multivariate_normal(means[1], cov, N)
X2 = np.random.multivariate_normal(means[2], cov, N)

X = np.concatenate((X0, X1, X2), axis = 0)
K = 3

original_label = np.asarray([0]*N + [1]*N + [2]*N).T



def kmeans_display(X, label):
    K = np.amax(label) + 1
    X0 = X[label == 0, :]
    X1 = X[label == 1, :]
    X2 = X[label == 2, :]
    
    plt.plot(X0[:, 0], X0[:, 1], 'b^', markersize = 4, alpha = .8)
    plt.plot(X1[:, 0], X1[:, 1], 'go', markersize = 4, alpha = .8)
    plt.plot(X2[:, 0], X2[:, 1], 'rs', markersize = 4, alpha = .8)

    plt.axis('equal')
    plt.plot()
    plt.show()
    
kmeans_display(X, original_label)



X = np.vstack([X0, X1, X2])
X



plt.plot(X[:, 0], X[:, 1], 'bo', markersize=5)



def Kmeans_init_centers(X, N):      
  return X[np.random.choice(X.shape[0], N, replace=False)]             # random centroids
  
  
  
def closest_points(X, centers):
 distance = cdist(X, centers)                                          # k/c data ts center
 return np.argmin(distance, axis = 1)                                  # return closest points
 
 
 
def update_centers(X, labels, K):
 centers = np.zeros((K, X.shape[1]))                                   # update nem_centers
 for k in range(N):
   new_centers = X[labels == k, :]
   centers[k, :] = np.mean(new_centers, axis = 0)
   return centers



def check_kmeans(centers, new_centers):                                 # check 
  if np.array_equal(centers, new_centers, equal_nan = False):
    return True
  
  
  
def kmeans(centers, labels):
  centers = Kmeans_init_centers(X, N)
  labels = closest_points(X, centers)
  while True:
    if check_kmeans(centers, update_centers(X, labels, K)):
      break
    else:
      centers = update_centers(X, labels, K)
    plt.scatter(X[:, 0], X[:, 1])
    plt.scatter(centroids[:, 0], centroids[:, 1], c='yellow', s=100)
  return (centers, labels)
  
  
  
  




